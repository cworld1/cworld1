{"title":"ChatGPT 深度使用与日用方案","date":"2023-03-27T14:07:32.000Z","date_formatted":{"ll":"2023年3月27日","L":"2023/03/27","MM-DD":"03-27"},"link":"post/chatgpt","comments":true,"tags":["GPT-3.5-turbo","Python"],"categories":["Tutorials"],"updated":"2023-12-15T11:02:17.662Z","content":"<h2 id=\"前置准备\">前置准备<a title=\"#前置准备\" href=\"#前置准备\"></a></h2>\n<p>ChatGPT 是一个基于 GPT-3.5-turbo 的聊天机器人，它可以通过简单的 API 调用来实现与人类的对话。</p>\n<p>关于如何注册 OPENAI，网上的方法已经很多了，这里不再赘述。这里简单讲解一下如何拿到 ChatGPT 的 API。</p>\n<p>在 <a href=\"https://chatgpt.com/\" target=\"_blank\">ChatGPT</a> 上注册成功账号后，在 <a href=\"https://chatgpt.com/api\" target=\"_blank\">API</a> 页面中，点击 <code>Get API Key</code> 按钮，即可获得你的 API Key。</p>\n<p><img src=\"https://cdn.cbd.int/cworld-blog@latest/post/chatgpt/Snipaste_2023-03-27_15-00-35.png\" alt=\"Get ChatGPT API Key\" loading=\"lazy\" class=\"φbp\"></p>\n<h2 id=\"其他办法\">其他办法<a title=\"#其他办法\" href=\"#其他办法\"></a></h2>\n<p>继续深入讲解如何利用你的 API Key 前，先简单讲述一下其他方法：</p>\n<p>通过网站：</p>\n<ol>\n<li><a href=\"https://chatbot.theb.ai/#/chat\" target=\"_blank\">BAI Chat</a> 就是一个干净免费的网站，完全可以直接使用，并且具备速通能力。</li>\n<li><a href=\"http://k.kliuu.xyz/index.php/2023/03/19/kliuu/\" target=\"_blank\">Kliuu ChatGPT</a> 是一个个人搭建的版本，同样有速通能力，但被限制最多输入 30 字符，最多回复 220 字符。</li>\n</ol>\n<p>通过 Telegram：</p>\n<ol>\n<li><a href=\"https://t.me/littleb_gptBOT\" target=\"_blank\">BAI</a> 就是上边提到的 BAI Chat 的 Telegram 版本，速度还算快，体验不错。</li>\n<li><a href=\"https://t.me/TheB_AI_Bot\" target=\"_blank\">BAI White</a> BAI Chat 的镜像版本。</li>\n<li><a href=\"https://t.me/OpenAI_GPT_Chatbot\" target=\"_blank\">ChatGPT OpenAI Bot</a> 甚至提供语音发送回复，但有 10 秒冷却（等于没有）。</li>\n</ol>\n<h2 id=\"chatgpt-与-telegram\">ChatGPT 与 Telegram<a title=\"#chatgpt-与-telegram\" href=\"#chatgpt-与-telegram\"></a></h2>\n<p>如果你对隐私、速度、安全或者单纯自定义有一定的要求，可以尝试自己搭建 Telegram 机器人，拥有更多的灵活度和更快的响应。更多信息详见 Github 项目 <a href=\"https://github.com/TBXark/ChatGPT-Telegram-Workers\" target=\"_blank\">TBXark/ChatGPT-Telegram-Workers</a>，下面也简单讲解一下部署流程。</p>\n<div class=\"φbt\"><ul>\n<li>\n<p>创建 Telegram 机器人</p>\n<p>首先，你需要一个 Telegram 账号，然后在 <a href=\"https://t.me/BotFather\" target=\"_blank\">BotFather</a> 上创建一个机器人，按照提示操作即可。</p>\n</li>\n<li>\n<p>部署 Workers</p>\n<ol>\n<li>在 <a href=\"https://dash.cloudflare.com/sign-up/workers\" target=\"_blank\">Cloudflare Workers</a> 上注册账号</li>\n<li>点击右上角的 Create a Service</li>\n<li>进入新建的 workers，选择 Quick Edit，将 <a href=\"https://github.com/TBXark/ChatGPT-Telegram-Workers/blob/master/dist/index.js\" target=\"_blank\">…/dist/index.js</a> 代码复制到编辑器中，保存。</li>\n</ol>\n<p><img src=\"https://cdn.cbd.int/cworld-blog@latest/post/chatgpt/Snipaste_2023-03-27_15-17-14.png\" alt=\"Alt text\" loading=\"lazy\" class=\"φbp\"></p>\n</li>\n<li>\n<p>配置环境变量</p>\n<p>前往你的 Workers,点击右上角的 Setting -&gt; Variables，设置下述变量。</p>\n<blockquote>\n<p>带 * 的为必设置，带 ^ 的为推荐设置</p>\n</blockquote>\n<div class=\"φbq\"><div class=\"φbs\"><table><thead>\n<tr>\n<th>变量名</th>\n<th>简述</th>\n<th>默认值</th>\n<th>特殊说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*API_KEY</td>\n<td>OpenAI API Key</td>\n<td><code>null</code></td>\n<td></td>\n</tr>\n<tr>\n<td>*TELEGRAM_AVAILABLE_TOKENS</td>\n<td>支持多个 Telegram Bot Token</td>\n<td><code>null</code></td>\n<td>多个 Token 用<code>,</code>分隔</td>\n</tr>\n<tr>\n<td>*CHAT_WHITE_LIST</td>\n<td>聊天 ID 白名单</td>\n<td><code>null</code></td>\n<td>多个 ID 用<code>,</code>分隔，不知道 ID，和<a href=\"https://t.me/username_to_id_bot\" target=\"_blank\">机器人</a>聊一句就能返回</td>\n</tr>\n<tr>\n<td>I_AM_A_GENEROUS_PERSON</td>\n<td>关闭白名单，允许所有人访问</td>\n<td><code>false</code></td>\n<td>鉴于很多人不想设置白名单，或者不知道怎么获取 ID，所以设置这个选项就能允许所有人访问， 值为<code>true</code>时生效</td>\n</tr>\n<tr>\n<td>AUTO_TRIM_HISTORY</td>\n<td>自动清理历史记录</td>\n<td><code>true</code></td>\n<td>为了避免 4096 字符限制，将消息删减</td>\n</tr>\n<tr>\n<td>MAX_HISTORY_LENGTH</td>\n<td>最大历史记录长度</td>\n<td><code>20</code></td>\n<td><code>AUTO_TRIM_HISTORY开启后</code> 为了避免 4096 字符限制，将消息删减</td>\n</tr>\n<tr>\n<td>CHAT_MODEL</td>\n<td>open ai 模型选择</td>\n<td><code>gpt-3.5-turbo</code></td>\n<td></td>\n</tr>\n<tr>\n<td>SYSTEM_INIT_MESSAGE</td>\n<td>系统初始化信息</td>\n<td><code>你是一个得力的助手</code></td>\n<td>默认机器人设定</td>\n</tr>\n<tr>\n<td>SYSTEM_INIT_MESSAGE_ROLE</td>\n<td>系统初始化信息角色</td>\n<td><code>system</code></td>\n<td>默认机器人设定</td>\n</tr>\n<tr>\n<td>^ENABLE_USAGE_STATISTICS</td>\n<td>开启使用统计</td>\n<td><code>false</code></td>\n<td>开启后，每次调用 API 都会记录到 KV，可以通过<code>/usage</code>查看</td>\n</tr>\n<tr>\n<td>HIDE_COMMAND_BUTTONS</td>\n<td>隐藏指令按钮</td>\n<td><code>null</code></td>\n<td>把想要隐藏的按钮写入用逗号分开<code>/start,/system</code>, 记得带上斜杠,修改之后得重新<code>init</code></td>\n</tr>\n<tr>\n<td>DEBUG_MODE</td>\n<td>调试模式</td>\n<td><code>false</code></td>\n<td>目前可以把最新一条消息保存到 KV 方便调试</td>\n</tr>\n<tr>\n<td>*WORKERS_DOMAIN</td>\n<td>Workers 域名</td>\n<td><code>null</code></td>\n<td>例如 workers_name.username.workers.dev</td>\n</tr>\n</tbody>\n</table></div></div></li>\n<li>\n<p>配置 KV 数据库</p>\n<ol>\n<li>前往侧栏的 Workers -&gt; KV，点击右上角的 <code>Create a Namespace</code>, 名字随便取, 但是绑定的时候必须设定为<code>DATABASE</code></li>\n<li>点击右上角的 Setting -&gt; Variables</li>\n<li>在 <code>KV Namespace Bindings</code> 中点击 <code>Edit variables</code></li>\n<li>点击 <code>Add variable</code></li>\n<li>设置名字为<code>DATABASE</code> 并选择刚刚创建的 KV 数据</li>\n</ol>\n</li>\n<li>\n<p>初始化</p>\n<ol>\n<li>运行 <code>https://workers_name.username.workers.dev/init</code> 自动绑定 telegram 的 webhook 和设定所有指令</li>\n<li>开始新对话,使用<code>/new</code>指令开始,之后每次都会将聊天上下文发送到 ChatGPT</li>\n<li>使用<code>/setenv KEY=VALUE</code>指令修改用户配置,例如<code>SETENV SYSTEM_INIT_MESSAGE=现在开始是喵娘,每句话已喵结尾</code></li>\n<li>使用 <code>/role 角色名 SYSTEM_INIT_MESSAGE=现在开始是猫娘，每句话以喵结尾</code> 可以创建一个新角色，并使用 <code>~角色名 聊天内容</code> 调用。</li>\n</ol>\n</li>\n</ul>\n</div><h2 id=\"chatgpt-与-ama\">ChatGPT 与 AMA<a title=\"#chatgpt-与-ama\" href=\"#chatgpt-与-ama\"></a></h2>\n<p>AMA（Ask Me Anything）原本指一种在线问答形式，这里只是一个 ChatGPT 第三方客户端，支持 Android 和 iOS。</p>\n<ul>\n<li>Android: <a href=\"https://play.google.com/store/apps/details?id=com.bytemyth.ama\" target=\"_blank\">Google Play Store</a></li>\n<li>iOS: <a href=\"https://apps.apple.com/cn/app/ama-ask-me-anything/id6446135619\" target=\"_blank\">App Store</a></li>\n</ul>\n<p>如果你还想获得速通能力，可以尝试自己设置 API Server（原理就是反代官方 API 接口）（感谢 <a href=\"https://googles.plus/2023/03/24/shi-yong-cloudflare-workers-jie-jue-openai-he-chatgpt-de-api-wu-fa-fang-wen/#!\" target=\"_blank\">sfc9982’s blog</a> 提供的思路）。</p>\n<p>与上文相同，你需要在 Cloudflare Workers 上部署一个 Worker。相关注册等流程上文讲过这里不再赘述。</p>\n<div class=\"φbt\"><ul>\n<li>\n<p>注意部署内容有发生改变，你需要填入以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> <span class=\"variable constant_\">TELEGRAPH_URL</span> = <span class=\"string\">&quot;https://api.openai.com&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">addEventListener</span>(<span class=\"string\">&quot;fetch&quot;</span>, <span class=\"function\">(<span class=\"params\">event</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  event.<span class=\"title function_\">respondWith</span>(<span class=\"title function_\">handleRequest</span>(event.<span class=\"property\">request</span>));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"keyword\">function</span> <span class=\"title function_\">handleRequest</span>(<span class=\"params\">request</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> url = <span class=\"keyword\">new</span> <span class=\"title function_\">URL</span>(request.<span class=\"property\">url</span>);</span><br><span class=\"line\">  url.<span class=\"property\">host</span> = <span class=\"variable constant_\">TELEGRAPH_URL</span>.<span class=\"title function_\">replace</span>(<span class=\"regexp\">/^https?:\\/\\//</span>, <span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> modifiedRequest = <span class=\"keyword\">new</span> <span class=\"title class_\">Request</span>(url.<span class=\"title function_\">toString</span>(), &#123;</span><br><span class=\"line\">    <span class=\"attr\">headers</span>: request.<span class=\"property\">headers</span>,</span><br><span class=\"line\">    <span class=\"attr\">method</span>: request.<span class=\"property\">method</span>,</span><br><span class=\"line\">    <span class=\"attr\">body</span>: request.<span class=\"property\">body</span>,</span><br><span class=\"line\">    <span class=\"attr\">redirect</span>: <span class=\"string\">&quot;follow&quot;</span>,</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> response = <span class=\"keyword\">await</span> <span class=\"title function_\">fetch</span>(modifiedRequest);</span><br><span class=\"line\">  <span class=\"keyword\">const</span> modifiedResponse = <span class=\"keyword\">new</span> <span class=\"title class_\">Response</span>(response.<span class=\"property\">body</span>, response);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 添加允许跨域访问的响应头</span></span><br><span class=\"line\">  modifiedResponse.<span class=\"property\">headers</span>.<span class=\"title function_\">set</span>(<span class=\"string\">&quot;Access-Control-Allow-Origin&quot;</span>, <span class=\"string\">&quot;*&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> modifiedResponse;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>点击编辑器右下角的 “Save and deploy” 按钮部署该代码，在弹出的对话框中继续选择 “Save and deploy” 确认部署。</p>\n</li>\n<li>\n<p>在 Cloudflare Workers 的管理界面中，点击 “Triggers” 选项卡，然后点击 “Custom Domians” 中的 “Add Custom Domain” 按钮以绑定自己的域名（为的是防止免费提供的域名本身被拒绝速通，如果你能用也可以不设置）。</p>\n</li>\n<li>\n<p>测试：将官方的 <a href=\"https://api.openai.com/v1/chat/completions\" target=\"_blank\">https://api.openai.com/v1/chat/completions</a> 换为自己的域名（如 <a href=\"https://mydomain.com/v1/chat/completions\" target=\"_blank\">https://mydomain.com/v1/chat/completions</a> ），如果打开收到结果如：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;error&quot;</span><span class=\"punctuation\">:</span> <span class=\"punctuation\">&#123;</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;message&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;You didn&#x27;t provide an API key. You need to provide your API key in an Authorization header using Bearer auth (i.e. Authorization: Bearer YOUR_KEY), or as the password field (with blank username) if you&#x27;re accessing the API from your browser and are prompted for a username and password. You can obtain an API key from https://platform.openai.com/account/api-keys.&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;type&quot;</span><span class=\"punctuation\">:</span> <span class=\"string\">&quot;invalid_request_error&quot;</span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;param&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span><span class=\"punctuation\">,</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;code&quot;</span><span class=\"punctuation\">:</span> <span class=\"literal\"><span class=\"keyword\">null</span></span></span><br><span class=\"line\">  <span class=\"punctuation\">&#125;</span></span><br><span class=\"line\"><span class=\"punctuation\">&#125;</span></span><br></pre></td></tr></table></figure>\n<p>说明你部署反代成功。只需填入 AMA 的设置中的 API Server 即可。</p>\n</li>\n</ul>\n</div><h2 id=\"chatgpt-与-purewriter\">ChatGPT 与 PureWriter<a title=\"#chatgpt-与-purewriter\" href=\"#chatgpt-与-purewriter\"></a></h2>\n<p>PureWriter 中文名纯纯写作，是一款优秀的写作工具，支持 Windows、Android 平台（但 Windows 功能比较残缺），这里以 Android 版（也只有这个支持）为例。</p>\n<p>下载：<a href=\"https://writer.drakeet.com\" target=\"_blank\">Pure Writer 官网</a></p>\n<p>在设置中可输入 ChatGPT 的 API Key 即可快速启用。注意纯纯写作不支持自定义 API Server，没有办法速通。</p>\n<p><img src=\"https://cdn.cbd.int/cworld-blog@latest/post/chatgpt/6129538924557743150_119.jpg\" alt=\"Pure Writer\" loading=\"lazy\" class=\"φbp\"></p>\n<p>除了 “时光机” 界面外，还能在打字界面调用，有效提升写作效率。当然你也可以单纯当作一款 ChatGPT 客户端。</p>\n","prev":{"title":"NodeJS 的一些相关技术","link":"post/nodejs"},"next":{"title":"Alist 自建0成本部署","link":"post/deploy-alist"},"plink":"https://blog.cworld.top/post/chatgpt/","toc":[{"id":"前置准备","title":"前置准备","index":"1"},{"id":"其他办法","title":"其他办法","index":"2"},{"id":"chatgpt-与-telegram","title":"ChatGPT 与 Telegram","index":"3"},{"id":"chatgpt-与-ama","title":"ChatGPT 与 AMA","index":"4"},{"id":"chatgpt-与-purewriter","title":"ChatGPT 与 PureWriter","index":"5"}],"reward":true,"copyright":{"updated":"2023年12月15日","author":"CWorld","link":"<a href=\"https://blog.cworld.top/post/chatgpt/\" title=\"ChatGPT 深度使用与日用方案\">https://blog.cworld.top/post/chatgpt/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"1682 字约 11 分钟"}