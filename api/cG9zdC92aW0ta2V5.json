{"title":"Vim 的一些键位知识","date":"2023-12-15T19:00:02.000Z","date_formatted":{"ll":"2023年12月15日","L":"2023/12/15","MM-DD":"12-15"},"thumbnail":"post/vim-key/vim-featured-image.webp","color":"#8C68B7","link":"post/vim-key","comments":true,"tags":["Vim"],"categories":["Tutorials"],"updated":"2024-04-29T04:28:45.531Z","content":"<p>用了几年 Vim 有了一些心得，故有此文。</p>\n<span id=\"more\"></span>\n<p>从第一次尝试使用 Vim，到现在不管啥环境都要装个 Vim 插件，也差不多有三年多了。正如俗话所说“万事开头难”嘛，我和大多数的 Vim 初学者一样，也遇到了一段别扭且艰难的学习期。不过好在 Vim 已经让我尝到了一些甜头，这最终使我习惯并喜欢上了这套“反人类”的编辑逻辑。所以这一期就来总结一下 Vim 的一些键位知识，也可以当成教程学习学习。</p>\n<p>此外关于我个人的使用上，在用 NeoVim、VSCodeVim 以及 IdeaVim，三家都很好用。不过目前我还只打算开源 NeoVim 的配置，有兴趣的可以看看我的配置仓库：<a href=\"https://github.com/cworld1/nvim-config\" target=\"_blank\">CWorld NVim Config - Github</a></p>\n<h2 id=\"最基础的内容\">最基础的内容<a title=\"#最基础的内容\" href=\"#最基础的内容\"></a></h2>\n<h3 id=\"简单的光标移动\">简单的光标移动<a title=\"#简单的光标移动\" href=\"#简单的光标移动\"></a></h3>\n<p>首先是最基础的光标移动。你可能会发现基础的上下左右还能用，但请保持习惯，除了编辑模式下一般不要去碰它。</p>\n<ul>\n<li>上：<code>k</code></li>\n<li>下：<code>j</code></li>\n<li>左：<code>h</code></li>\n<li>右：<code>l</code></li>\n</ul>\n<p>食指作为更加灵活的那个手指，放在下移光标上，能够更频繁敏捷地持续下移光标。</p>\n<h3 id=\"简单的开始输入\">简单的开始输入<a title=\"#简单的开始输入\" href=\"#简单的开始输入\"></a></h3>\n<p>进入输入模式：</p>\n<ul>\n<li>向光标位置输入：<code>i</code> (insert mode)</li>\n<li>向光标后一个字符的位置输入：<code>a</code> (append)</li>\n<li>从这一行开头位置输入：<code>I</code> (insert at eol)</li>\n<li>从这一行末尾位置输入：<code>A</code> (append at eol)</li>\n<li>单独向下创建一行输入：<code>o</code> (open below)</li>\n<li>单独向上创建一行输入：<code>O</code> (open above)</li>\n</ul>\n<blockquote>\n<p>还有个冷门的：<code>s</code> 删除当前字符并进入输入模式。</p>\n</blockquote>\n<p>使用 Esc 退出该模式。</p>\n<h3 id=\"编辑器的常见操作\">编辑器的常见操作<a title=\"#编辑器的常见操作\" href=\"#编辑器的常见操作\"></a></h3>\n<ul>\n<li>删除一个字符：<code>x</code> (delete char)</li>\n<li>删除前一个字符：<code>X</code> (delete backspace)</li>\n<li>撤销：<code>u</code> (undo)</li>\n<li>返回撤销操作：<code>c-r</code> (redo)（意为 Ctrl + r，后同）</li>\n</ul>\n<h3 id=\"编辑器的文件基本操作\">编辑器的文件基本操作<a title=\"#编辑器的文件基本操作\" href=\"#编辑器的文件基本操作\"></a></h3>\n<ul>\n<li>\n<p>保存：<code>:w</code></p>\n<blockquote>\n<p>强制保存：<code>:w!</code></p>\n</blockquote>\n</li>\n<li>\n<p>退出当前窗口：<code>:q</code></p>\n<blockquote>\n<ul>\n<li>强制退出：<code>:q!</code></li>\n<li>退出所有窗口：<code>:qa</code></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>这样的一个字符命令通常能够连在一起，比如：<code>:wq</code>、<code>:qa!</code>。输入完命令后记得按回车执行。</p>\n<h2 id=\"vim-进阶功能\">Vim 进阶功能<a title=\"#vim-进阶功能\" href=\"#vim-进阶功能\"></a></h2>\n<h3 id=\"更方便的光标移动\">更方便的光标移动<a title=\"#更方便的光标移动\" href=\"#更方便的光标移动\"></a></h3>\n<p>行内跳转：</p>\n<p>使用 <code>w</code> (next word) 或者 <code>e</code> (end word) 向后移动一个词语，其中 <code>w</code> 总是会移动到单词开头，<code>e</code> 总是移动到单词结尾。任何标点字符都会作为分割。<code>b</code> (prev word) 则可以以同样的方式前移。注意这个跳转能跨行。</p>\n<blockquote>\n<p><code>gw</code> / <code>ge</code> 也可以实现回跳，但是两个键也太麻烦了。<br>\n大写的对应按键也有奇效，但是一般不用，这里不展开。</p>\n</blockquote>\n<ul>\n<li>前往行首：0 (“hard” bol)</li>\n<li>前往行第一个非空字符：^ (“soft” bol)（你也可以用 0 和 w 配合使用达到同样的效果，不用按住 Shift）</li>\n<li>前往行末：$ (eol)</li>\n</ul>\n<p>既能行内也能行外的跳转：</p>\n<ul>\n<li>\n<p>从各种括号的一头跳到另一头：<code>%</code></p>\n</li>\n<li>\n<p>重复执行以便快速移动：数字 + hjkl</p>\n<blockquote>\n<p>默认情况下侧栏的行号总是显示相对的，所以在跳转行时可以看一眼侧栏相对行号快速跳转。大多数 IDE 都支持这个设定。以 Vim 配置为例：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> <span class=\"keyword\">number</span> relativenumber</span><br></pre></td></tr></table></figure>\n<p>此外向下移动光标还有：数字 + 回车。</p>\n</blockquote>\n</li>\n</ul>\n<p>行外跳转：</p>\n<ul>\n<li>\n<p>快速跳转上一个/下一个空行：<code>&#123;</code> 和 <code>&#125;</code> 。</p>\n</li>\n<li>\n<p>下翻 1/2 页：<code>c-d</code></p>\n</li>\n<li>\n<p>上翻 1/2 页：<code>c-u</code></p>\n</li>\n<li>\n<p>下翻 1/1 页：<code>c-f</code></p>\n</li>\n<li>\n<p>下翻 1/1 页：<code>c-b</code></p>\n<blockquote>\n<p>还有个没啥用的：</p>\n<ul>\n<li>下滚动一行：<code>c-e</code></li>\n<li>上滚动一行：<code>c-y</code></li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>对于全文跳转：</p>\n<ul>\n<li>前往整个内容顶部：<code>gg</code> 或者 <code>[[</code> 或者 <code>:0</code> 或者 <code>:1</code></li>\n<li>前往整个内容底部：<code>G</code> 或者 <code>]]</code> 或者 <code>:$</code></li>\n</ul>\n<p>一个很方便的快捷键：</p>\n<ul>\n<li>将当前编辑行置于视图中间：<code>zz</code></li>\n</ul>\n<h3 id=\"快速地选择内容\">快速地选择内容<a title=\"#快速地选择内容\" href=\"#快速地选择内容\"></a></h3>\n<p>进入选择模式：</p>\n<ul>\n<li>\n<p>正常选择（Visual）：<code>v</code></p>\n<blockquote>\n<p>按下时你就已经选择了当前的一个字母。</p>\n</blockquote>\n</li>\n<li>\n<p>行选择（Visual Line）：<code>V</code></p>\n<blockquote>\n<p>按下时你就已经选择了该行。</p>\n</blockquote>\n</li>\n<li>\n<p>块选择（Visual Block）：<code>c-v</code></p>\n</li>\n</ul>\n<p>使用 Esc 退出该模式。</p>\n<h3 id=\"更多样地选择内容\">更多样地选择内容<a title=\"#更多样地选择内容\" href=\"#更多样地选择内容\"></a></h3>\n<p>进入选择模式后，你可以使用正常的光标移动技巧，以及一些更加灵活的选择方式：</p>\n<ul>\n<li>\n<p>选择单词（从光标到下一个符号/空格，包括符号）：<code>w</code> (word)</p>\n</li>\n<li>\n<p>选择当前单词：<code>iw</code> (in word)</p>\n</li>\n<li>\n<p>选择当前单词（包括下一个符号/空格）：<code>aw</code> (around word)</p>\n<blockquote>\n<p>同理，可将 <code>w</code> 换成别的，比如：</p>\n<ul>\n<li>大写单词 <code>W</code> (WORD)</li>\n<li>以逗号句号感叹号等收尾的句子（没有的话就是全段了）：<code>s</code> (sentence)</li>\n<li>段落：<code>p</code> (paregraph)</li>\n<li>引号：<code>&quot;</code>、<code>'</code></li>\n<li>括号：<code>[]</code>、<code>()</code> 等。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"修改内容\">修改内容<a title=\"#修改内容\" href=\"#修改内容\"></a></h3>\n<p>仅修改当前光标所在的这一个字符：<code>r</code> (replace mode)</p>\n<blockquote>\n<p>进阶玩法：配合选择模式，先选择内容，再使用 r，可以替换选择范围内的所有内容为新字符。</p>\n</blockquote>\n<p>一些必须要配合的命令：</p>\n<ul>\n<li>\n<p>修改选择内容并进入 insert 模式：<code>c</code> (change)</p>\n<blockquote>\n<p>可以先选择内容后使用，也可配合选择一起使用，如 <code>ciw</code>、<code>cap</code>、<code>c3j</code> 等。</p>\n<p>修改本行内光标后的所有内容可用 <code>C</code></p>\n</blockquote>\n</li>\n<li>\n<p>删除选择内容：<code>d</code>（delete）</p>\n<blockquote>\n<p>使用方法同上，如 <code>diw</code>、<code>cap</code> 等。不过如果是先选择后删除的话，<code>x</code> 也是一样的（Vim 特色之都可以实现）。</p>\n<p>删除本行内光标后的所有内容可用 <code>D</code></p>\n</blockquote>\n</li>\n<li>\n<p>复制选择内容：<code>y</code> (yank)</p>\n<blockquote>\n<p>复制本行也可以用 <code>Y</code></p>\n</blockquote>\n</li>\n<li>\n<p>缩进选择内容：<code>&gt;</code> 以及反缩进 <code>&lt;</code>。这个命令可以重复表示缩进/反缩进多少格，如：<code>3&gt;</code>。</p>\n</li>\n</ul>\n<p>此外还可以：</p>\n<ul>\n<li>重复输入两次以便快速使用，效果为作用于该行整行，相当于 V + 对应命令。目前已知的命令包括：<code>cc</code>、<code>dd</code>、<code>yy</code>、<code>&gt;&gt;</code>、<code>&lt;&lt;</code>。</li>\n<li>搭配数字实现对于多少汗的重复，如 <code>y3y</code>、<code>3yy</code>。已知可用的命令同上。</li>\n</ul>\n<h3 id=\"复制与粘贴\">复制与粘贴<a title=\"#复制与粘贴\" href=\"#复制与粘贴\"></a></h3>\n<p>在你进行复制、字符替换、删除、选择修改、覆盖粘贴时，均会将原作用内容同时复制到你的剪贴板。</p>\n<p>这个剪贴板是独立于你的操作系统的，你可以通过下面的配置将其连接：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">set</span> clipboard+=unnamed</span><br></pre></td></tr></table></figure>\n<p>粘贴命令：</p>\n<ul>\n<li>当前位置后面粘贴内容：<code>p</code> (paste after)</li>\n<li>当前位置前面粘贴内容：<code>P</code> (paste before)</li>\n</ul>\n<blockquote>\n<p>通常是你在复制整行后，粘贴时注意粘贴位置在前或后会比较方便。</p>\n<p>当你选择了部分内容时，本次粘贴会覆盖选择内容（当然正常编辑器都是这样）。</p>\n</blockquote>\n<h2 id=\"vim-深入功能\">Vim 深入功能<a title=\"#vim-深入功能\" href=\"#vim-深入功能\"></a></h2>\n<h3 id=\"行内跳转\">行内跳转<a title=\"#行内跳转\" href=\"#行内跳转\"></a></h3>\n<ul>\n<li>跳转到行内下一个字符：<code>f</code> + 跳转字符 (find char)</li>\n<li>跳转到行内上一个字符：<code>F</code> + 跳转字符 (“back” find ch)</li>\n</ul>\n<blockquote>\n<p>以及：</p>\n<ul>\n<li>跳转到行内下一个字符（但是光标往前挪一个）：<code>t</code> + 跳转字符 (find char)</li>\n<li>跳转到行内上一个字符（但是光标往后挪一个）：<code>T</code> (“back” find ch)</li>\n</ul>\n<p>但是不知道有什么用。？</p>\n</blockquote>\n<p>可配合 <code>c</code>、<code>d</code>、<code>y</code> 命令。使用 <code>;</code> 可以持续执行上面说的这个跳转操作，只要当前 buffer 没有被关闭就能一直保存跳转字符的记录，随时可用。而 <code>,</code> 则做相反方向的查找。</p>\n<h3 id=\"查找\">查找<a title=\"#查找\" href=\"#查找\"></a></h3>\n<ul>\n<li>向后优先查找内容：<code>/</code> + 对应内容。输入回车后启用查找模式。</li>\n<li>向前优先查找内容：<code>?</code> + 对应内容。</li>\n</ul>\n<blockquote>\n<p>一些相关的 Vim 配置：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&quot; 在输入搜索时逐步匹配并高亮显示匹配的文本</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> incsearch</span><br><span class=\"line\"><span class=\"comment\">&quot; 在搜索时忽略大小写</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> ignorecase</span><br><span class=\"line\"><span class=\"comment\">&quot; 将搜索匹配的文本高亮显示</span></span><br><span class=\"line\"><span class=\"keyword\">set</span> hlsearch</span><br></pre></td></tr></table></figure>\n</blockquote>\n<p>注：</p>\n<ul>\n<li>\n<p>使用 <code>n</code> (next) 或 <code>N</code> (prev) 跳转所有匹配项。</p>\n</li>\n<li>\n<p>使用 <code>#</code> (prev ident) 和 <code>*</code> (next ident) 跳转要求更严格，要求每次出现的前后为空白字符或标点符号。不过这两个键还担任了一个小功能：选择想要查找的文段，然后按下这两个的一个就可以快速启动查找。</p>\n</li>\n<li>\n<p>查找支持正则表达式，例如 <code>/vim$</code> 匹配行尾的 “vim”。需要查找特殊字符需要转义，例如 <code>/vim\\$</code> 匹配 “vim$”。</p>\n</li>\n<li>\n<p>如果你不喜欢默认忽略大小写，但是有时候又想用，可以尝试在查找模式中加入指令：<code>\\c</code> 表示大小写不敏感查找，<code>\\C</code> 表示大小写敏感查找。如：<code>/foo\\c</code></p>\n</li>\n<li>\n<p>高亮显示匹配内容当然很棒！但是取消高亮命令 <code>:nohl</code> 就很不方便了。我一般的解决方案是：</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">nnoremap</span> <span class=\"symbol\">&lt;Esc&gt;</span> :nohl<span class=\"symbol\">&lt;CR&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将这个命令映射到 Esc 键。</p>\n</li>\n</ul>\n<h3 id=\"替换\">替换<a title=\"#替换\" href=\"#替换\"></a></h3>\n<p><code>:s</code>（substitute）命令用来查找和替换字符串。语法：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:&#123;作用范围&#125;s/&#123;目标&#125;/&#123;替换&#125;/&#123;替换标志&#125;</span><br></pre></td></tr></table></figure>\n<p>作用范围：</p>\n<ul>\n<li>指定行：如 <code>5s</code>、<code>+2s</code>。<code>.s</code>表示当前行，可省略为<code>s</code></li>\n<li>指定行到行：如 <code>5,12s</code>。结合起来使用就可以表示接下来/这之前多少行，如 <code>.,+2s</code></li>\n<li>全文：<code>%s</code></li>\n<li>选择模式下选择范围内：<code>'&lt;,'&gt;s</code>（选择模式下 Vim 会帮你补全关键字）</li>\n</ul>\n<p>替换标志：</p>\n<ul>\n<li>\n<p>不写则只替换第一个。</p>\n</li>\n<li>\n<p>全局替换：<code>g</code></p>\n</li>\n<li>\n<p>手动提示确认：<code>c</code></p>\n<p>使用后会有提示：<code>replace with bar (y/n/a/q/l/^E/^Y)?</code></p>\n<p>其中 <code>y</code> 表示替换，<code>n</code> 表示不替换，<code>a</code> 表示替换所有，<code>q</code> 表示退出查找模式，<code>l</code> 表示替换当前位置并退出。<code>E</code> 与 <code>Y</code> 是光标移动快捷键。</p>\n</li>\n<li>\n<p>大小写敏感：<code>i</code> 表示大小写不敏感查找，<code>I</code> 表示大小写敏感。如：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:%s/foo/bar/i</span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">等效于搜索模式中的\\c（不敏感）或\\C（敏感）：</span></span><br><span class=\"line\"><span class=\"meta prompt_\"># </span><span class=\"language-bash\">:%s/foo\\c/bar</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<blockquote>\n<p>上述替换标志可以结合使用，如 <code>:%s/foo/bar/gc</code></p>\n</blockquote>\n<!-- ### 文件操作\n\n将当前文件中的第 3~9 行复制并写到新文件 f01 中：[ :3,9w f01 ] -->\n<h2 id=\"vim-特色功能\">Vim 特色功能<a title=\"#vim-特色功能\" href=\"#vim-特色功能\"></a></h2>\n<h3 id=\"实用小功能\">实用小功能<a title=\"#实用小功能\" href=\"#实用小功能\"></a></h3>\n<ul>\n<li>\n<p>跳转到指定行：<code>:</code> + 行号</p>\n<blockquote>\n<p>或者使用行号 + <code>gg</code>（Vim 特色之都可以实现）</p>\n</blockquote>\n</li>\n<li>\n<p>转置字母大小写：<code>~</code></p>\n<blockquote>\n<p>也可以通过选择以后按 <code>u</code> 改为小写、<code>U</code> 改为大写实现（Vim 特色之都可以实现）</p>\n<p>也可以使用 <code>g</code> 这个转置，将 <code>gu</code>、<code>gU</code> 或者 <code>g~</code> 与选择操作拼接起来。</p>\n</blockquote>\n</li>\n<li>\n<p>数字增减：自增为 <code>c-a</code>，自减为 <code>c-x</code></p>\n<blockquote>\n<p>快速生成数列可以使用 <code>:put=range(0,10,2)</code>，好像语法跟 Python 是一样的。最后一个参数为 1 时可省略。</p>\n<p>此外这个增减不仅可以适用于数字，还可以是八进制、十六进制、bin 和 alpha（我们 Vim 玩家真是增增又减减啊）</p>\n</blockquote>\n<p>后文还有讲多行递增/递减。</p>\n</li>\n<li>\n<p>内容排序：<code>:sort</code>。反向排序使用 <code>:sort!</code></p>\n<p>可以结合作用范围使用：如 <code>:3,16sort</code>。该功能可能在 CSS 属性排序很好用</p>\n<blockquote>\n<p>此外还有：</p>\n<ul>\n<li>删除重复行：<code>:sort u</code></li>\n<li>仅使用数字排序 <code>:sort n</code></li>\n</ul>\n</blockquote>\n</li>\n<li>\n<p>多光标：使用 <code>c-v</code> 进入 Visual Block 模式，将光标选中移动到指定位置后：</p>\n<ul>\n<li>同时在每行选择内容开头插入：<code>I</code></li>\n<li>同时在每行选择内容末尾追加：<code>A</code></li>\n<li>同时编辑：<code>c</code></li>\n<li>同时删除：<code>d</code> 或者 <code>x</code></li>\n<li>同时修改为同一字符：<code>r</code></li>\n<li>数字递进自增/自减：先选中数字列，<code>g</code>，然后 <code>c-a</code> 或者 <code>c-x</code></li>\n</ul>\n</li>\n<li>\n<p>合并行，将下一行或者选中行通过空格连接，而不是回车：<code>J</code> (join)</p>\n<blockquote>\n<p>如果你不喜欢空格可以用 <code>gJ</code> 转置。</p>\n</blockquote>\n</li>\n<li>\n<p>关闭自动换行后的“行内”上下移动光标：<code>gk</code>、<code>gj</code></p>\n</li>\n<li>\n<p>删除行：<code>:&#123;作用范围&#125;g/&#123;包含关键词&#125;/d</code></p>\n<p>反选删除行：<code>:&#123;作用范围&#125;g!/&#123;关键词&#125;/d</code> 或 <code>:&#123;作用范围&#125;v/&#123;关键词&#125;/d</code></p>\n<p>大部分时候结合正则可能更好用，如：<code>:g/^\\s*$/d</code> 表示删除空白行</p>\n</li>\n</ul>\n<h3 id=\"实用大功能\">实用大功能<a title=\"#实用大功能\" href=\"#实用大功能\"></a></h3>\n<p>实在太先进了，极大提高你工作效率的独家秘技，所以我要叫它“大功能”（乐）</p>\n<ul>\n<li>\n<p>标记：<code>m</code> + 自定义字母 (mark)</p>\n<p>之后使用 ` + 自定义字母跳转到标记。</p>\n</li>\n<li>\n<p>宏录制：<code>q</code> + 自定义字母 (record macro)</p>\n<p>再按一次 <code>q</code> 结束。之后使用 <code>@</code> + 自定义字母播放录制的操作宏。可配合数字实现重复执行播放。</p>\n</li>\n</ul>\n<h2 id=\"最后的话\">最后的话<a title=\"#最后的话\" href=\"#最后的话\"></a></h2>\n<p>嗯… 文章有亿点长了。如果实在不喜欢记这些东西，并且真的感觉 Vim 很反人类的话，建议停止尝试。适合自己的才是最好的。</p>\n<p>最后给一个一图流链接吧，个人感觉这个写的还蛮不错的。</p>\n<p><a href=\"http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html\" target=\"_blank\">Graphical vi-vim Cheat Sheet and Tutorial</a></p>\n<p><img src=\"post/vim-key/vi-vim-cheat-sheet.png\" alt=\"vi-vim-cheat-sheet\" loading=\"lazy\" class=\"φbp\"></p>\n","next":{"title":"NodeJS 的一些相关技术","link":"post/nodejs"},"plink":"https://blogv2.cworld.top/post/vim-key/","toc":[{"id":"最基础的内容","title":"最基础的内容","index":"1","children":[{"id":"简单的光标移动","title":"简单的光标移动","index":"1.1"},{"id":"简单的开始输入","title":"简单的开始输入","index":"1.2"},{"id":"编辑器的常见操作","title":"编辑器的常见操作","index":"1.3"},{"id":"编辑器的文件基本操作","title":"编辑器的文件基本操作","index":"1.4"}]},{"id":"vim-进阶功能","title":"Vim 进阶功能","index":"2","children":[{"id":"更方便的光标移动","title":"更方便的光标移动","index":"2.1"},{"id":"快速地选择内容","title":"快速地选择内容","index":"2.2"},{"id":"更多样地选择内容","title":"更多样地选择内容","index":"2.3"},{"id":"修改内容","title":"修改内容","index":"2.4"},{"id":"复制与粘贴","title":"复制与粘贴","index":"2.5"}]},{"id":"vim-深入功能","title":"Vim 深入功能","index":"3","children":[{"id":"行内跳转","title":"行内跳转","index":"3.1"},{"id":"查找","title":"查找","index":"3.2"},{"id":"替换","title":"替换","index":"3.3"}]},{"id":"vim-特色功能","title":"Vim 特色功能","index":"4","children":[{"id":"实用小功能","title":"实用小功能","index":"4.1"},{"id":"实用大功能","title":"实用大功能","index":"4.2"}]},{"id":"最后的话","title":"最后的话","index":"5"}],"reward":true,"copyright":{"updated":"2024年4月29日","author":"CWorld","link":"<a href=\"https://blogv2.cworld.top/post/vim-key/\" title=\"Vim 的一些键位知识\">https://blogv2.cworld.top/post/vim-key/</a>","license":"Attribution-NonCommercial-NoDerivatives 4.0 International (<a href=\"https://creativecommons.org/licenses/by-nc-sa/4.0/\" rel=\"external nofollow noopener\" target=\"_blank\">CC BY-NC-ND 4.0</a>)"},"reading_time":"3112 字约 21 分钟"}