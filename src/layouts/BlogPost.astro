---
import type { CollectionEntry } from 'astro:content'

import PageLayout from '@/layouts/BaseLayout.astro'
import TOC from '@/components/pages/TOC.astro'
import BlogHero from '@/components/blog/Hero.astro'
import Copyright from '@/components/blog/Copyright.astro'
import ArticleBottom from '@/components/blog/ArticleBottom.astro'
import Comment from '@/components/Comment.astro'
import Button from '@/components/Button.astro'

import '@waline/client/style'

interface Props {
  post: CollectionEntry<'post'>
}

const { post } = Astro.props
const {
  data: { description, ogImage, coverImage, publishDate, title, updatedDate }
} = post
const socialImage = ogImage ?? (coverImage ? coverImage.src.src : '/images/social-card.png')
const articleDate = updatedDate?.toISOString() ?? publishDate.toISOString()
const { headings } = await post.render()
const primaryColor = post.data.coverImage?.color ?? 'hsl(var(--primary) / var(--tw-text-opacity))'
---

<PageLayout
  meta={{ articleDate, description, ogImage: socialImage, title }}
  highlightColor={primaryColor}
>
  <div class='w-full'>
    <Button title='Back' href='/blog' style='back' />
    <div class='mt-8 gap-x-10 lg:flex lg:items-start'>
      {!!headings.length && <TOC headings={headings} />}
      <article
        class='flex-grow break-words'
        style='flex-grow: 3; flex-shrink: 1; flex-basis: 60%;'
        data-pagefind-body
      >
        <div id='blog-hero'><BlogHero content={post} /></div>
        <div
          id='content'
          class='animate prose prose-base prose-zinc mt-8 text-muted-foreground dark:prose-invert prose-headings:font-medium prose-headings:text-foreground prose-headings:before:absolute prose-headings:before:-ms-4 prose-th:before:content-none'
        >
          <slot />
        </div>
      </article>
    </div>
    <div
      class='prose prose-base prose-zinc mt-8 text-muted-foreground dark:prose-invert prose-headings:font-medium prose-headings:text-foreground prose-headings:before:absolute prose-headings:before:-ms-4 prose-th:before:content-none'
    >
      <!-- copyright -->
      <Copyright content={post} />
      <!-- article recommend -->
      <ArticleBottom content={post} class='mt-3 sm:mt-6' />
      <!-- comment -->
      {!post.data.draft && <Comment class='mt-3 sm:mt-6' />}
    </div>
    <button
      aria-label='Back to Top'
      class='z-90 group fixed bottom-8 end-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-primary-foreground text-muted-foreground opacity-0 transition-all duration-300 hover:border-border/75 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 sm:end-8 sm:h-12 sm:w-12'
      data-show='false'
      id='to-top-btn'
    >
      <div
        class='absolute bottom-0 end-0 start-0 top-0 flex items-center justify-center transition-opacity group-hover:opacity-0 group-[.ended]:opacity-0'
      >
        <span class='text'>10</span>
        <span class='text-xs'>%</span>
      </div>
      <svg
        class='size-6 opacity-0 transition-opacity group-hover:opacity-100 group-[.ended]:opacity-100'
      >
        <use href='/icons/ui.svg#mingcute-up-line'></use>
      </svg>
    </button>
  </div>
</PageLayout>

<script>
  const scrollBtn = document.getElementById('to-top-btn') as HTMLButtonElement
  const scrollPercentEl = scrollBtn.children[0].children[0] as HTMLElement
  const targetHeader = document.getElementById('blog-hero') as HTMLDivElement
  const articleElement = document.getElementById('content') as HTMLDivElement

  // scroll to top
  function callback(entries: IntersectionObserverEntry[]) {
    entries.forEach((entry) => {
      // only show the scroll to top button when the heading is out of view
      scrollBtn.dataset.show = (!entry.isIntersecting).toString()
    })
  }
  scrollBtn.addEventListener('click', () => {
    document.documentElement.scrollTo({ behavior: 'smooth', top: 0 })
  })
  const observer = new IntersectionObserver(callback)
  observer.observe(targetHeader)

  // scroll percentage
  const scrollHeight = articleElement.scrollHeight // total height
  const articleTop = articleElement.offsetTop // article top
  const clientHeight = document.documentElement.clientHeight // client height

  function calculateScrollPercent() {
    var scrollTop = document.documentElement.scrollTop || document.body.scrollTop
    if (scrollTop < articleTop) return
    return Math.round(((scrollTop - articleTop) / (scrollHeight - clientHeight)) * 100)
  }

  document.addEventListener('scroll', () => {
    const scrollPercent = calculateScrollPercent()
    if (scrollPercent === undefined) return
    scrollPercentEl.innerText = scrollPercent.toString()

    // If percent is 100, percent won't need to show
    scrollBtn.classList.toggle('ended', scrollPercent > 100)
  })
</script>

<style define:vars={{ primaryColor }}>
  :global(.highlight) {
    color: var(--primaryColor) !important;
  }
  :global(.highlight-bg) {
    background-color: var(--primaryColor) !important;
  }

  #content :global(h2:target::before),
  #content :global(h3:target::before) {
    display: inline-block;
    content: '#';
    margin-inline-start: -30px;
    width: 30px;
  }

  #content :global(blockquote) {
    position: relative;
    overflow: hidden;
  }
  #content :global(blockquote::after) {
    position: absolute;
    content: '‚Äù';
    top: -5.4rem;
    right: 0;
    font-size: 10rem;
    font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande', 'Lucida Sans', Arial,
      sans-serif;
    transform: rotate(-15deg);
    opacity: 5%;
  }
</style>
